service: inLink-task-api
plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-mocha-plugin
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    port: 9006
provider:
  name: aws
  runtime: nodejs14.x
  stage: ${env:DEPLOY_STAGE}
  region: ${env:DEPLOY_REGION}
  timeout: 30
  versionFunctions: false
functions:
  taskManagement:
    handler: lambdaFunctions/taskManagement/index.js
    events:
      - http:
          path: users/{test}
          method: DELETE
          cors: true
          authorizer: aws_iam
      - http:
          path: users
          method: GET
          cors: true
          authorizer: aws_iam
      - http:
          path: task
          method: POST
          cors: true
          authorizer: aws_iam
      - http:
          path: task
          method: PUT
          cors: true
          authorizer: aws_iam
  getTaskById:
    handler: lambdaFunctions/taskManagement/getTaskById.main
    events:
      - http:
          path: getTaskById
          method: get
          cors: true
          authorizer: aws_iam
  recognitionManagement:
    handler: lambdaFunctions/Recognition/index.main
    events:
      - http:
          path: recognition/{id}
          method: DELETE
          cors: true
          authorizer: aws_iam
      - http:
          path: recognition
          method: GET
          cors: true
          authorizer: aws_iam
      - http:
          path: recognition
          method: POST
          cors: true
          authorizer: aws_iam
      - http:
          path: recognition
          method: PUT
          cors: true
          authorizer: aws_iam
  recognitionByEmloyee:
    handler: lambdaFunctions/Recognition/getEmpRecognition.main
    events:
      - http:
          path: empRecognition
          method: GET
          cors: true
          authorizer: aws_iam
  getEmployee:
    handler: lambdaFunctions/Recognition/getEmployee.getEmployees
    events:
      - http:
          path: getEmployee
          method: get
          cors: true
          authorizer: aws_iam
  createEvents:
    handler: lambdaFunctions/Events/createEvents.create
    events:
      - schedule: cron(0 0 * * ? *)
  getEvents:
    handler: lambdaFunctions/Events/getEvents.getEvents
    events:
      - http:
          path: getEvents
          method: get
          cors: true
          authorizer: aws_iam
  TaskNotification:
    handler: lambdaFunctions/TaskNotification/index.TaskNotification
  DealNotification:
    handler: lambdaFunctions/DealNotification/index.DealNotification
  handler:
    handler: handler.hello
    events:
      - http:
          path: handler
          method: get
          cors: true
  recognitionCommentMangament:
    handler: lambdaFunctions/recognitionComment/index.main
    events:
      - http:
          path: recognitionComment
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: recognitionComment
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: recognitionComment/{id}
          method: delete
          cors: true
          authorizer: aws_iam
      - http:
          path: recognitionComment
          method: put
          cors: true
          authorizer: aws_iam
  recognitionLikeMangament:
    handler: lambdaFunctions/recogLikeManagement/index.main
    events:
      - http:
          path: recognitionLike
          method: post
          cors: true
      - http:
          path: recognitionLike
          method: get
          cors: true
  recognitionNotification:
    handler: lambdaFunctions/Recognition/createNotification.createNotification